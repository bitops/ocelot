#!/usr/bin/env ruby

require 'optparse'
options = {}
optparse = OptionParser.new do |opts|
  opts.banner = "Usage: ocelot [options]"

  opts.on("-n", "--line-numbers", "Add line numbers") do |ln|
    options[:line_numbers] = ln
  end

  opts.on("-b", "--non-blank-line-numbers", "Add line numbers for non-blank lines") do |ln|
    options[:non_blank] = ln
    options[:line_numbers] = ln
  end

  opts.on("-s", "--squeeze", "Squeeze adjacent empty lines") do |s|
    options[:squeeze] = s
  end  
  
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end

begin
  optparse.parse!
rescue OptionParser::InvalidOption => e
  STDERR.write "ocelot: #{e}\nusage: ocelot [-bns] [file ...]\n"
  exit 1
end

if ARGV.empty?
  print ARGF.read
else
  given_files = ARGV.map(&:to_s)
  given_files.each do |file|
    idx = 1
    line_was_blank = false
    File.open(file).each_line do |line|
      if options[:squeeze]
        if line.strip.empty? && line_was_blank
          next
        elsif !line.strip.empty?
          line_was_blank = false
        end
      end
      if (options[:non_blank] && line.strip.empty?) || (!options[:line_numbers])
        print line
        if options[:squeeze]
          line_was_blank = true if line.strip.empty?
        end
      else
        if options[:line_numbers]
          print ["#{idx}".rjust(6, " "), "\t", "#{line}"].join("")
        end
        idx += 1
        if options[:squeeze]
          line_was_blank = true if line.strip.empty?
        end
      end
    end
  end
end
